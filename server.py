import requests
from datetime import datetime
from typing import Union, Literal, List
from mcp.server import FastMCP
from pydantic import Field
from typing import Annotated
from mcp.server.fastmcp import FastMCP
from fastmcp import FastMCP, Context
import os
from dotenv import load_dotenv
load_dotenv()
rapid_api_key = os.getenv("RAPID_API_KEY")

__rapidapi_url__ = 'https://rapidapi.com/restyler/api/scrapeninja'

mcp = FastMCP('scrapeninja')

@mcp.tool()
def scrape(data: Annotated[dict, Field(description='')] = None) -> dict: 
    '''Scrape via POST method.'''
    url = 'https://scrapeninja.p.rapidapi.com/scrape'
    headers = {'Content-Type': 'application/json', 'x-rapidapi-host': 'scrapeninja.p.rapidapi.com', 'x-rapidapi-key': rapid_api_key}
    response = requests.post(url, headers=headers, json=data)
    return response.json()

@mcp.tool()
def scrape_js(data: Annotated[dict, Field(description='')] = None) -> dict: 
    '''Launches real Chrome browser engine, use only when /scrape endpoint features are not enough. Leverage `catchAjaxHeadersUrlMask` to catch some cookies which are generated by the website protections and then use them in /scrape calls'''
    url = 'https://scrapeninja.p.rapidapi.com/scrape-js'
    headers = {'Content-Type': 'application/json', 'x-rapidapi-host': 'scrapeninja.p.rapidapi.com', 'x-rapidapi-key': rapid_api_key}
    response = requests.post(url, headers=headers, json=data)
    return response.json()



if __name__ == '__main__':
    import sys
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 9997
    mcp.run(transport="stdio")
